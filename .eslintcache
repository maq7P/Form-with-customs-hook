[{"C:\\Users\\Maxim\\react-form\\src\\index.js":"1","C:\\Users\\Maxim\\react-form\\src\\App.js":"2","C:\\Users\\Maxim\\react-form\\src\\Form.js":"3","C:\\Users\\Maxim\\react-form\\src\\FormSignup.js":"4","C:\\Users\\Maxim\\react-form\\src\\useForm.js":"5","C:\\Users\\Maxim\\react-form\\src\\validateInfo.js":"6"},{"size":196,"mtime":1610226048882,"results":"7","hashOfConfig":"8"},{"size":155,"mtime":1610226434947,"results":"9","hashOfConfig":"8"},{"size":209,"mtime":1610226798191,"results":"10","hashOfConfig":"8"},{"size":3509,"mtime":1610450263225,"results":"11","hashOfConfig":"8"},{"size":682,"mtime":1610450190263,"results":"12","hashOfConfig":"8"},{"size":771,"mtime":1610449899957,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"s7ijhv",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Maxim\\react-form\\src\\index.js",[],["28","29"],"C:\\Users\\Maxim\\react-form\\src\\App.js",[],"C:\\Users\\Maxim\\react-form\\src\\Form.js",[],"C:\\Users\\Maxim\\react-form\\src\\FormSignup.js",["30"],"C:\\Users\\Maxim\\react-form\\src\\useForm.js",["31"],"import {useState, useEffect} from 'react'\r\n\r\nconst useForm = validate => {\r\n    const [values, setValues] = useState({\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        password2: ''\r\n    })\r\n    const [errors, setErrors] = useState({\r\n\r\n    })\r\n\r\n    const handlerChange = e => {\r\n        const {name, value} = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        setErrors(validate(values))\r\n    }\r\n\r\n    return {\r\n        values, \r\n        handlerChange, \r\n        handleSubmit, \r\n        errors\r\n    }\r\n}\r\n\r\nexport default useForm\r\n","C:\\Users\\Maxim\\react-form\\src\\validateInfo.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":83,"column":52,"nodeType":"38","endLine":83,"endColumn":64},{"ruleId":"39","severity":1,"message":"40","line":1,"column":19,"nodeType":"41","messageId":"42","endLine":1,"endColumn":28},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]